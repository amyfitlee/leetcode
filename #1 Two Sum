Given an array of integers, return indices of the two numbers such that they add up to a specific target.

You may assume that each input would have exactly one solution, and you may not use the same element twice.

Example:

Given nums = [2, 7, 11, 15], target = 9,

Because nums[0] + nums[1] = 2 + 7 = 9,
return [0, 1].


Sol 1:
// build the hash table, meanwhile check the table
class Solution {
public:
    vector<int> twoSum(vector<int>& nums, int target){
        unordered_map<int, int> m;
        for(int i = 0; i < nums.size(); ++i){
            if(m.count(target - nums[i])){
                return vector<int>{m[target - nums[i]],i};
            }
            m[nums[i]] = i;
        }
        return {};
    }
};

Sol 2:
// sort
class Solution {
public:
    vector<int> twoSum(vector<int>& nums, int target){
        int n = nums.size();
        vector<int> nums_copy(n);
        copy(nums.begin(), nums.end(), nums_copy.begin());
        sort(nums_copy.begin(), nums_copy.end());
        int l = 0, r = n - 1;
        while(l < r){
            if(nums_copy[l] + nums_copy[r] == target) break;
            if(nums_copy[l] + nums_copy[r] < target) ++l;
            else --r;
        }
        vector<int> ans;
        for(int i = 0; i < n; ++i){
            if(nums[i] == nums_copy[l] || nums[i] == nums_copy[r]){
                ans.push_back(i);
                if(ans.size() == 2) return ans;
            } 
        }
        return ans;
    }
};

