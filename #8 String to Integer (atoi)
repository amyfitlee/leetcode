//implement atoi which converts a string to an integer.
//
//the function first discards as many whitespace characters as necessary until the first non - whitespace character is found.then, starting from this character, takes an optional initial plus or minus sign followed by as many numerical digits as possible, and interprets them as a numerical value.
//
//the string can contain additional characters after those that form the integral number, which are ignored and have no effect on the behavior of this function.
//
//if the first sequence of non - whitespace characters in str is not a valid integral number, or if no such sequence exists because either str is empty or it contains only whitespace characters, no conversion is performed.
//
//if no valid conversion could be performed, a zero value is returned.


#include <vector>
#include <algorithm>
#include <string>

using namespace std;

class Solution {
public:
	int myAtoi(string str) {
		int i = str.find_first_not_of(' ');
		if (i == string::npos) return 0;
		int sign = 1;
		if (str[i] == '+' || str[i] == '-')
			sign = str[i++] == '+' ? 1 : -1;
		long long ans = 0;
		while (isdigit(str[i])) {
			ans = ans * 10 + (str[i++] - '0');
			if (sign > 0 && ans >= INT_MAX) return INT_MAX;
			if (sign < 0 && ans - 1 >= INT_MAX) return INT_MIN;
		}
		return ans * sign;
	}
};

class Solution {
public:
	int myAtoi(string str) {
		int ret = 0, sign = 1, i = str.find_first_not_of(' '), base = INT_MAX / 10;
		if (i == string::npos) return 0;
		if (str[i] == '+' || str[i] == '-') sign = str[i++] == '+' ? : -1;
		while (isdigit(str[i])) {
			if (ret > base || (ret == base && str[i] - '0' > 7))
				return sign > 0 ? INT_MAX : INT_MIN;
			ret = 10 * ret + (str[i++] - '0');
		}
		return sign * ret;
	}
};

void main() {
	Solution sol;
	string s1 = "4193 with words";
	int ans = sol.myAtoi(s1);

}


