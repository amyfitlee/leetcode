//Write a program to solve a Sudoku puzzle by filling the empty cells.
//
//A sudoku solution must satisfy all of the following rules :
//
//Each of the digits 1 - 9 must occur exactly once in each row.
//Each of the digits 1 - 9 must occur exactly once in each column.
//Each of the the digits 1 - 9 must occur exactly once in each of the 9 3x3 sub - boxes of the grid.
//Empty cells are indicated by the character '.'.


#include <vector>
#include <algorithm>

using namespace std;

class Solution {
public:
	void solveSudoku(vector<vector<char>>& board) {
		_solveSudoku(board, 0, 0);
	}
  
	bool _solveSudoku(vector<vector<char>>& board, int i, int j) {
		if (i == 9) 
			return true;
		if (j == 9) 
			return _solveSudoku(board, i + 1, 0);
		if (board[i][j] != '.')
			return _solveSudoku(board, i, j + 1);
		for (char c = '1'; c <= '9'; ++c) {
			if (isvalid(board, i, j, c)) {
				board[i][j] = c;
				if (_solveSudoku(board, i, j + 1)) return true;
				board[i][j] = '.';
			}
		}
		return false;
	}
  
	bool isvalid(vector<vector<char>>& board, const int& m, const int& n, const char& c) {
		for (int i = 0; i < 9; ++i) {
			if (board[i][n] == c) return false;
			if (board[m][i] == c) return false;
		}
		int ii = m / 3, jj = n / 3;
		for (int i = 0; i < 3; ++i) {
			for (int j = 0; j < 3; ++j) {
				if (board[ii * 3 + i][jj * 3 + j] == c) return false;
			}
		}
		return true;
	}
};

void main() {
	Solution sol;
	vector<vector<char>> board = { {'5','3','.','.','7','.','.','.','.'},{'6','.','.','1','9','5','.','.','.'},{'.','9','8','.','.','.','.','6','.'},{'8','.','.','.','6','.','.','.','3'},{'4','.','.','8','.','3','.','.','1'},{'7','.','.','.','2','.','.','.','6'},{'.','6','.','.','.','.','2','8','.'},{'.','.','.','4','1','9','.','.','5'},{'.','.','.','.','8','.','.','7','9'} };
	sol.solveSudoku(board);
}
