class Solution {
public:
    vector<string> generateParenthesis(int n) {
        vector<string> ans;
        string cur;
        dfs(cur, ans, n, n);
        return ans;
    }
    void dfs(string cur, vector<string>& ans, int n, int m){
        if(n == 0 && m == 0){
            ans.push_back(cur);
            return;
        }
        if(n > 0) dfs(cur + '(', ans, n - 1, m);
        if(m > n) dfs(cur + ')', ans, n, m - 1);
    }
    
};
