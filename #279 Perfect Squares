class Solution {
public:
	int numSquares(int n) {
		static vector<int> dp{0};
		while (dp.size() <= n) {
			int m = dp.size();
			int cur = INT_MAX;
			for (int i = 1; i * i <= m; ++i) {
					cur = min(cur, 1 + dp[m - i * i]);
			}
			dp.push_back(cur);
		}
		return dp[n];
	}
};


class Solution {
public:
	int numSquares(int n) {
        int r = sqrt(n);
		if (n == r * r) return 1;
		vector<int> dp(n + 1, INT_MAX);
		dp[0] = 0;
		for (int i = 1; i <= n; ++i) {
            for (int j = 1; j * j <= i; ++j) {
                dp[i] = min(dp[i], 1 + dp[i - j * j]);
            }
			
		}
		return dp[n];
	}
};
