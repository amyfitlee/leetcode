Solution 1: reverse the order first, then reverse it back. From HuaHua
class Solution {
public:
    vector<int> postorderTraversal(TreeNode* root) {
        if(!root) return {};
        stack<TreeNode*> s;
        s.push(root);
        deque<int> res;
        while(!s.empty()){
            TreeNode* cur = s.top();
            res.push_front(cur->val);
            s.pop();
            if(cur->left) s.push(cur->left);
            if(cur->right) s.push(cur->right);
        }
        return vector<int>(res.begin(),res.end());
    }
};

Solution 2:
class Solution {
public:
    vector<int> postorderTraversal(TreeNode* root) {
        vector<int> res;
        TreeNode* last = nullptr;
        stack<TreeNode*> s;
        while(root || !s.empty()){
            if(root){
                s.push(root);
                root = root->left;
            }
            else{
                TreeNode* node = s.top();
                if(node->right && node->right != last){
                    root = node->right;
                }
                else{
                    res.push_back(node->val);
                    last = node;
                    s.pop();
                }
            }
        }
        return res;
    }
};
