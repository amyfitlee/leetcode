 class Solution {
 public:
	 double findMedianSortedArrays(vector<int>& nums1, vector<int>& nums2) {
		 int m = nums1.size();
		 int n = nums2.size();
		 if (m > n) return findMedianSortedArrays(nums2, nums1);
		 int l = 0, r = 2 * m, mid = 0;
		 while (l <= r) {
			 mid = l + (r - l) / 2;
             int cut2 = n + m - mid;
			 double Lnum1 = mid != 0 ? nums1[(mid - 1) / 2] : INT_MIN;
			 double Rnum1 = mid != 2 * m ? nums1[mid / 2] : INT_MAX;
			 double Lnum2 = cut2 != 0 ? nums2[(cut2 - 1) / 2] : INT_MIN;
			 double Rnum2 = cut2 != 2 * n ? nums2[cut2 / 2] : INT_MAX;
			 if (Lnum1 > Rnum2) r = mid - 1;
			 else if (Lnum2 > Rnum1) l = mid + 1;
			 else return (max(Lnum1, Lnum2) + min(Rnum1, Rnum2)) / 2;
		 }
		 return -1;
	 }
 };
