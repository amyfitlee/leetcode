class Solution {
public:
    Node* connect(Node* root) {
        if(!root) return nullptr;
        Node* pre = root;
        Node* cur;
        while(pre->left){
            cur = pre;
            while(cur){
                cur->left->next = cur->right;
                if(cur->next) cur->right->next = cur->next->left;
                cur = cur->next;
            }
            pre = pre->left;
        }
        return root;
    }
};

class Solution {
public:
    Node* connect(Node *root) {
        helper(root);
        return root;
    }
    void helper(Node* root){
        if(!root) return;
        if(root->left){
            root->left->next = root->right;
            helper(root->left);
        }
        if(root->right){
            if(root->next)
                root->right->next = root->next->left;
            helper(root->right);
        }
    }
};


class Solution {
public:
    Node* connect(Node* root) {
        if(!root) return root;
        queue<Node*> q;
        q.push(root);
        while(!q.empty()){
            int n = q.size();
            for(int i = 0; i < n; ++i){
                Node* cur = q.front();
                q.pop();
                cur->next = (i == n - 1 ? nullptr : q.front());
                if(cur->left) q.push(cur->left);
                if(cur->right) q.push(cur->right);
            }
        }
        return root;
    }
};
